Question: When would you want to use a remote repository rather than keeping 
all your work local?
Answer: When I need to access the repository in different locations, or I want
 to share my project to someone else not nearby.


Question: Why might you want to always pull changes manually rather than having
 Git automatically stay up-to-date with your remote repository?
Answer: Because of the changes in remote repository may contain conflict to my
 local repository, then I need to resolve it, if the Git automatically pull 
 from remote, it may break my current job. So pull changes manually give me 
 the control of "When to resolve those conflict.".


Question: Describe the differences between forks, clones, and branches. When 
would you use one instead of another?
Answer: The branch operate on the local repository and and only effect that 
one, and clone operate on one repository -- both local or remote, and create 
one local copy of it, fork operate on a GitHub repository, and create one copy
 on the GitHub.
 		If I want got a GitHub repository clone, and store the result on the 
 GitHub, I can use fork instead of clone, save some time, and indicate my 
 repository is a copy of the former one.

 
Question: What is the benefit of having a copy of the last known state of the 
remote stored locally?
Answer: It makes me can work offline.


Question: How would you collaborate without using Git or GitHub? What would be
 easier, and what would be harder?
Answer: I had some experience of using Microsoft VSS, Subversion, both of them
 can not let me work offline -- without the central server, so the location for
 working is not flexible, and there were many "lock" opreation, a situation
 that only the person who "locked" one file can modify it, the rest of teammate
 who need to modify that file, can only wait for a "unlock" operation.


Question: When would you want to make changes in a separate branch rather than
 directly master? What benefits does each approach have?
Answer: I think two conditions will cause me to make a branch.
		First, I need a stable version, and only make bug-fix on that, and on
		the other hand, still have some new features to create, then the stable
		version become a seperate branch till I want to release those new
		features.
		Second, when I have some experimental ideas, but I don't want to add
		it in to project immediately, the experimental idea will cause a
		separate branch, till it's proved to be a useful feature.

		Develop on master branch, makes the operation on repository easy,
		but the master will always contains some bugs introduced along development,
		not so stable.













